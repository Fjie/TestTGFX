name: notifybot

# 监听 PR 事件的触发类型，包括新建、同步和重新打开 PR
on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  poll_workflows:
    runs-on: ubuntu-latest

    # 定义所需的环境变量
    env:
      PR_NUMBER: ${{ github.event.pull_request.number }}
      REPO_OWNER: ${{ github.repository_owner }}
      REPO_NAME: ${{ github.event.repository.name }} # 确保只包含仓库名称
      EVENT_TITLE: ${{ github.event.pull_request.title }}
      WECHAT_WEBHOOK_KEY: ${{ secrets.WECHAT_WEBHOOK_KEY }}
      MAX_ATTEMPTS: 30               # 最大尝试次数（例如 30 次 ~ 30 分钟）
      SLEEP_DURATION: 60            # 每次轮询的等待时间（秒）
      REQUIRED_WORKFLOWS: "build,autotest,Tencent DevOps(OpenSource)" # 需要监控的工作流名称，以逗号分隔
      HEAD_REF: ${{ github.event.pull_request.head.ref }}

    steps:
      # 步骤 1：设置 GitHub CLI 并进行认证
      - name: Set up GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      # 步骤 2：安装必要的依赖工具
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      # 步骤 3：获取并打印与 PR 关联的所有工作流
      - name: Fetch and Print Associated Workflows
        id: fetch_workflows
        run: |
          echo "Fetching all workflows associated with PR #$PR_NUMBER on branch $HEAD_REF..."

          # 使用 GitHub CLI 获取指定分支上的所有工作流运行
          workflow_runs=$(gh api "repos/$REPO_OWNER/$REPO_NAME/actions/runs?branch=$HEAD_REF&per_page=100" || echo "{}")

          # 检查 API 请求是否成功
          if [ "$workflow_runs" = "{}" ]; then
            echo "Failed to fetch workflow runs. Please check repository name and permissions."
            exit 1
          fi

          # 提取工作流名称并去重
          associated_workflows=$(echo "$workflow_runs" | jq -r '.workflow_runs[].name' | sort | uniq)

          if [ -z "$associated_workflows" ]; then
            echo "No associated workflows found."
          else
            echo "Associated workflows:"
            echo "$associated_workflows"
          fi
          
          # 从 REQUIRED_WORKFLOWS 中移除 associated_workflows 中没有的项
          IFS=',' read -ra REQUIRED_WORKFLOWS_ARRAY <<< "$REQUIRED_WORKFLOWS"
          filtered_workflows=()
          for workflow in "${REQUIRED_WORKFLOWS_ARRAY[@]}"; do
            if echo "$associated_workflows" | grep -q "$workflow"; then
              filtered_workflows+=("$workflow")
            fi
          done
          REQUIRED_WORKFLOWS=$(IFS=','; echo "${filtered_workflows[*]}")
          echo "Filtered REQUIRED_WORKFLOWS: $REQUIRED_WORKFLOWS"

          # 设置输出变量
          echo "filtered_workflows=$REQUIRED_WORKFLOWS" >> $GITHUB_OUTPUT

      # 步骤 4：轮询检查指定工作流状态并发送通知
      - name: Poll Workflow Status and Send Notifications
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ env.PR_NUMBER }}
          REPO_OWNER: ${{ env.REPO_OWNER }}
          REPO_NAME: ${{ env.REPO_NAME }}
          WECHAT_WEBHOOK_KEY: ${{ env.WECHAT_WEBHOOK_KEY }}
          MAX_ATTEMPTS: ${{ env.MAX_ATTEMPTS }}
          SLEEP_DURATION: ${{ env.SLEEP_DURATION }}
          REQUIRED_WORKFLOWS: ${{ steps.fetch_workflows.outputs.filtered_workflows }}
          EVENT_TITLE: ${{ env.EVENT_TITLE }}
          HEAD_REF: ${{ env.HEAD_REF }}
        run: |
          # 将需要监控的工作流名称分割成数组
          IFS=',' read -ra WORKFLOWS <<< "$REQUIRED_WORKFLOWS"
          attempt=0
          success=true
          failure=false

          echo "开始轮询检查 PR #$PR_NUMBER 的工作流状态..."

          while [ $attempt -lt $MAX_ATTEMPTS ]; do
            echo "检查工作流状态，尝试次数：$((attempt+1))/${MAX_ATTEMPTS}"

            all_success=true
            any_failure=false

            for workflow in "${WORKFLOWS[@]}"; do
              echo "正在检查工作流 \"$workflow\" 的最新运行状态..."

              # 使用 GitHub CLI 获取特定工作流的最新运行
              workflow_run=$(gh api "repos/$REPO_OWNER/$REPO_NAME/actions/workflows/$workflow.yml/runs?branch=$HEAD_REF&per_page=1" --jq '.workflow_runs[0]' || echo "{}")

              if [ "$workflow_run" = "{}" ]; then
                echo "工作流 \"$workflow\" 尚未启动运行。"
                all_success=false
                continue
              fi

              # 提取结论状态和当前状态
              conclusion=$(echo "$workflow_run" | jq -r '.conclusion // "no_run"')
              status=$(echo "$workflow_run" | jq -r '.status')

              echo "Workflow \"$workflow\" 状态: $conclusion, 进度: $status"

              if [[ "$status" == "completed" && "$conclusion" == "success" ]]; then
                echo "工作流 \"$workflow\" 已成功完成。"
              elif [[ "$conclusion" == "failure" || "$conclusion" == "cancelled" || "$conclusion" == "timed_out" || "$conclusion" == "action_required" ]]; then
                echo "工作流 \"$workflow\" 失败或需要人工干预。"
                any_failure=true
                all_success=false
              elif [[ "$status" == "queued" || "$status" == "in_progress" ]]; then
                echo "工作流 \"$workflow\" 正在进行中。"
                all_success=false
              else
                echo "工作流 \"$workflow\" 状态未知。"
                all_success=false
              fi
            done

            # 根据当前工作流状态决定下一步动作
            if [ "$all_success" = true ]; then
              echo "所有监控的工作流都已成功完成。"
              # 发送成功通知
              curl -X POST -H "Content-Type: application/json" \
              -d "{
                    \"msgtype\": \"text\",
                    \"text\": {
                      \"content\": \"仓库 '${REPO_NAME}' 的构建和测试已成功完成。\n标题: '${EVENT_TITLE}'\n请及时合入: https://github.com/${REPO_OWNER}/${REPO_NAME}/pull/${PR_NUMBER}\"
                    }
                  }" \
              "https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=${WECHAT_WEBHOOK_KEY}"
              break
            elif [ "$any_failure" = true ]; then
              echo "检测到至少一个工作流失败或需要人工干预。"
              # 发送失败通知
              curl -X POST -H "Content-Type: application/json" \
              -d "{
                    \"msgtype\": \"text\",
                    \"text\": {
                      \"content\": \"仓库 '${REPO_NAME}' 的构建和测试失败。\n标题: '${EVENT_TITLE}'\n请检查详细日志: https://github.com/${REPO_OWNER}/${REPO_NAME}/pull/${PR_NUMBER}\"
                    }
                  }" \
              "https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=${WECHAT_WEBHOOK_KEY}"
              failure=true
              break
            else
              echo "部分工作流尚未完成。等待 $SLEEP_DURATION 秒后重试。"
              sleep $SLEEP_DURATION
              attempt=$((attempt+1))
            fi
          done

          PR_URL="https://github.com/$REPO_OWNER/$REPO_NAME/pull/$PR_NUMBER"

          if [ "$all_success" = true ]; then
            # 已在上方发送成功通知
            exit 0
          elif [ "$failure" = true ]; then
            # 已在上方发送失败通知
            exit 1
          else
            echo "在最大尝试次数内未检测到工作流的完成状态。"
            # 发送超时通知
            curl -X POST -H "Content-Type: application/json" \
            -d "{
                  \"msgtype\": \"text\",
                  \"text\": {
                    \"content\": \"仓库 '${REPO_NAME}' 的构建和测试检查超时。\n标题: '${EVENT_TITLE}'\n请手动检查相关工作流。\"
                  }
                }" \
            "https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=${WECHAT_WEBHOOK_KEY}"
            exit 1
          fi
        shell: bash