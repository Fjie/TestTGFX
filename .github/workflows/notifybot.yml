name: notifybot

# 监听 PR 事件的触发类型，包括新建、同步和重新打开 PR
on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  poll_workflows:
    runs-on: ubuntu-latest

    # 定义所需的环境变量
    env:
      PR_NUMBER: ${{ github.event.pull_request.number }}
      REPO_OWNER: ${{ github.repository_owner }}
      REPO_NAME: ${{ github.repository }}
      EVENT_TITLE: ${{ github.event.pull_request.title }}
      WECHAT_WEBHOOK_KEY: ${{ secrets.WECHAT_WEBHOOK_KEY }}
      MAX_ATTEMPTS: 30             # 最大尝试次数（例如 30 次 ~ 30 分钟）
      SLEEP_DURATION: 60          # 每次轮询的等待时间（秒）
      REQUIRED_WORKFLOWS: "build,autotest" # 需要监控的工作流名称，以逗号分隔

    steps:
      # 步骤 1：安装必要的依赖工具
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      # 步骤 2：获取并打印与 PR 关联的所有工作流
      - name: Fetch and Print Associated Workflows
        run: |
          echo "Fetching all workflows associated with PR #$PR_NUMBER..."

          # 使用 check-runs API 获取关联的工作流
          response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/pulls/$PR_NUMBER/check-runs")

          # 提取工作流名称并打印
          associated_workflows=$(echo "$response" | jq -r '.check_runs[].app.name' | sort | uniq)

          if [ -z "$associated_workflows" ]; then
            echo "No associated workflows found."
          else
            echo "Associated workflows:"
            echo "$associated_workflows"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ env.PR_NUMBER }}
          REPO_OWNER: ${{ env.REPO_OWNER }}
          REPO_NAME: ${{ env.REPO_NAME }}

      # 步骤 3：轮询检查指定工作流状态并发送通知
      - name: Poll Workflow Status and Send Notifications
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ env.PR_NUMBER }}
          REPO_OWNER: ${{ env.REPO_OWNER }}
          REPO_NAME: ${{ env.REPO_NAME }}
          WECHAT_WEBHOOK_KEY: ${{ env.WECHAT_WEBHOOK_KEY }}
          MAX_ATTEMPTS: ${{ env.MAX_ATTEMPTS }}
          SLEEP_DURATION: ${{ env.SLEEP_DURATION }}
          REQUIRED_WORKFLOWS: ${{ env.REQUIRED_WORKFLOWS }}
          EVENT_TITLE: ${{ env.EVENT_TITLE }}
        run: |
          IFS=',' read -ra WORKFLOWS <<< "$REQUIRED_WORKFLOWS"
          attempt=0
          success=true
          failure=false

          echo "开始轮询检查 PR #$PR_NUMBER 的工作流状态..."

          while [ $attempt -lt $MAX_ATTEMPTS ]; do
            echo "检查工作流状态，尝试次数：$((attempt+1))/${MAX_ATTEMPTS}"

            all_success=true
            any_failure=false

            for workflow in "${WORKFLOWS[@]}"; do
              echo "正在检查工作流 \"$workflow\" 的最新运行状态..."

              # 获取最新的 workflow run 状态
              workflow_run=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/actions/runs?pull_requests=$PR_NUMBER&per_page=1&workflow_name=${workflow}")

              # 提取结论状态，如果没有运行则为 "no_run"
              conclusion=$(echo "$workflow_run" | jq -r '.workflow_runs[0].conclusion // "no_run"')

              echo "Workflow \"$workflow\" 状态: $conclusion"

              if [[ "$conclusion" == "success" ]]; then
                echo "工作流 \"$workflow\" 已成功完成。"
              elif [[ "$conclusion" == "failure" || "$conclusion" == "cancelled" || "$conclusion" == "timed_out" || "$conclusion" == "action_required" ]]; then
                echo "工作流 \"$workflow\" 失败或需要人工干预。"
                any_failure=true
                all_success=false
              elif [[ "$conclusion" == "no_run" ]]; then
                echo "工作流 \"$workflow\" 尚未启动运行。"
                all_success=false
              else
                # 其他结论状态，如 "queued", "in_progress"
                echo "工作流 \"$workflow\" 正在进行中或状态未知。"
                all_success=false
              fi
            done

            # 根据当前工作流状态决定下一步动作
            if [ "$all_success" = true ]; then
              echo "所有监控的工作流都已成功完成。"
              break
            elif [ "$any_failure" = true ]; then
              echo "检测到至少一个工作流失败或需要人工干预。"
              failure=true
              break
            else
              echo "部分工作流尚未完成。等待 $SLEEP_DURATION 秒后重试。"
              sleep $SLEEP_DURATION
              attempt=$((attempt+1))
            fi
          done

          PR_URL="https://github.com/$REPO_OWNER/$REPO_NAME/pull/$PR_NUMBER"

          if [ "$all_success" = true ]; then
            echo "发送成功完成的通知到 Webhook。"
            curl -X POST -H "Content-Type: application/json" \
              -d '{
                    "msgtype": "text",
                    "text": {
                      "content": "仓库 '$REPO_OWNER'/'$REPO_NAME' 的构建和测试已成功完成。\n标题: '$EVENT_TITLE'\n请及时合入: '$PR_URL'"
                    }
                  }' \
              "https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=${WECHAT_WEBHOOK_KEY}"
          elif [ "$failure" = true ]; then
            echo "发送失败的通知到 Webhook。"
            curl -X POST -H "Content-Type: application/json" \
              -d '{
                    "msgtype": "text",
                    "text": {
                      "content": "仓库 '$REPO_OWNER'/'$REPO_NAME' 的构建或测试失败。\n标题: '$EVENT_TITLE'\n请检查详细日志: '$PR_URL'"
                    }
                  }' \
              "https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=${WECHAT_WEBHOOK_KEY}"
          else
            echo "在最大尝试次数内未检测到工作流的完成状态。"
            # 可选：发送超时通知
            curl -X POST -H "Content-Type: application/json" \
              -d '{
                    "msgtype": "text",
                    "text": {
                      "content": "仓库 '$REPO_OWNER'/'$REPO_NAME' 的构建和测试检查超时。\n标题: '$EVENT_TITLE'\n请手动检查相关工作流。"
                    }
                  }' \
              "https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=${WECHAT_WEBHOOK_KEY}"
            exit 1
          fi
        shell: bash