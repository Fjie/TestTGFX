name: notifybot

# 监听 PR 事件的触发类型，包括新建、同步和重新打开 PR
on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  poll_workflows:
    runs-on: ubuntu-latest

    steps:
      # 步骤 1：初始化变量
      - name: Initialize Variables
        id: vars
        run: |
          echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          echo "REPO_OWNER=${{ github.repository_owner }}" >> $GITHUB_ENV
          echo "REPO_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV
          echo "TARGET_BRANCH=${{ github.event.pull_request.base.ref }}" >> $GITHUB_ENV
          echo "EVENT_TITLE=$(jq --raw-output .pull_request.title $GITHUB_EVENT_PATH)" >> $GITHUB_ENV
          echo "WECHAT_WEBHOOK_KEY=${{ secrets.WECHAT_WEBHOOK_KEY }}" >> $GITHUB_ENV
          echo "MAX_ATTEMPTS=30" >> $GITHUB_ENV            # 最大尝试次数，例如 30 次 ~ 30 分钟
          echo "SLEEP_DURATION=60" >> $GITHUB_ENV         # 每次轮询的等待时间（秒）

      # 步骤 2：安装必要的依赖工具
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      # 步骤 3：获取分支保护规则中的必需状态检查
      - name: Fetch Required Status Checks
        id: fetch_checks
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_OWNER: ${{ env.REPO_OWNER }}
          REPO_NAME: ${{ env.REPO_NAME }}
          TARGET_BRANCH: ${{ env.TARGET_BRANCH }}
        run: |
          echo "Fetching branch protection for $REPO_OWNER/$REPO_NAME:$TARGET_BRANCH..."
          
          # 获取分支保护规则
          protection_response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/branches/$TARGET_BRANCH/protection")

          # 提取必需的状态检查名称
          required_checks=$(echo "$protection_response" | jq -r '.required_status_checks.contexts // empty')

          if [ -z "$required_checks" ]; then
            echo "未找到分支保护规则中的必需状态检查。请确保分支保护规则配置正确。"
            exit 1
          fi

          echo "找到以下必需状态检查（工作流）："
          echo "$required_checks"

          # 将必需状态检查名称保存到 workflows.txt
          echo "$required_checks" > workflows.txt

      # 步骤 4：轮询检查工作流状态
      - name: Poll Workflow Status
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ env.PR_NUMBER }}
          REPO_OWNER: ${{ env.REPO_OWNER }}
          REPO_NAME: ${{ env.REPO_NAME }}
          WECHAT_WEBHOOK_KEY: ${{ env.WECHAT_WEBHOOK_KEY }}
          MAX_ATTEMPTS: ${{ env.MAX_ATTEMPTS }}
          SLEEP_DURATION: ${{ env.SLEEP_DURATION }}
        run: |
          attempt=0
          success=true
          failure=false

          echo "开始轮询检查 PR #$PR_NUMBER 的工作流状态..."

          while [ $attempt -lt $MAX_ATTEMPTS ]; do
            echo "检查工作流状态，尝试次数：$((attempt+1))/${MAX_ATTEMPTS}"

            # 初始化标志
            all_success=true
            any_failure=false

            # 读取 workflows.txt 中的必需工作流名称
            while IFS= read -r workflow; do
              echo "正在检查工作流 \"$workflow\" 的最新运行状态..."

              # 获取最新的 workflow run 状态
              workflow_run=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/actions/runs?pull_requests=$PR_NUMBER&per_page=1&workflow_name=${workflow}")

              # 提取结论状态，如果没有运行则为 "no_run"
              conclusion=$(echo "$workflow_run" | jq -r '.workflow_runs[0].conclusion // "no_run"')

              echo "Workflow \"$workflow\" 状态: $conclusion"

              if [[ "$conclusion" == "success" ]]; then
                echo "工作流 \"$workflow\" 已成功完成。"
              elif [[ "$conclusion" == "failure" || "$conclusion" == "cancelled" || "$conclusion" == "timed_out" || "$conclusion" == "action_required" ]]; then
                echo "工作流 \"$workflow\" 失败或需要人工干预。"
                any_failure=true
                all_success=false
              elif [[ "$conclusion" == "no_run" ]]; then
                echo "工作流 \"$workflow\" 尚未启动运行。"
                all_success=false
              else
                # 其他结论状态，如 "queued", "in_progress"
                echo "工作流 \"$workflow\" 正在进行中或状态未知。"
                all_success=false
              fi
            done < workflows.txt

            # 根据当前工作流状态决定下一步动作
            if [ "$all_success" = true ]; then
              echo "所有工作流都已成功完成。"
              break
            elif [ "$any_failure" = true ]; then
              echo "检测到至少一个工作流失败或需要人工干预。"
              failure=true
              break
            else
              echo "部分工作流尚未完成。等待 $SLEEP_DURATION 秒后重试。"
              sleep $SLEEP_DURATION
              attempt=$((attempt+1))
            fi
          done

          # 准备发送通知的变量
          REPO_FULL_NAME="${REPO_OWNER}/${REPO_NAME}"
          PR_URL="https://github.com/${REPO_FULL_NAME}/pull/${PR_NUMBER}"
          EVENT_TITLE="${EVENT_TITLE}"

          # 根据轮询结果发送相应的通知
          if [ "$all_success" = true ]; then
            echo "发送成功完成的通知到 Webhook。"
            curl -X POST -H "Content-Type: application/json" \
              -d '{
                    "msgtype": "text",
                    "text": {
                      "content": "仓库 '"$REPO_FULL_NAME"' 的构建和测试已成功完成。\n标题: '"$EVENT_TITLE"'\n请及时合入: '"$PR_URL"'"
                    }
                  }' \
              "https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=${WECHAT_WEBHOOK_KEY}"
          elif [ "$failure" = true ]; then
            echo "发送失败的通知到 Webhook。"
            curl -X POST -H "Content-Type: application/json" \
              -d '{
                    "msgtype": "text",
                    "text": {
                      "content": "仓库 '"$REPO_FULL_NAME"' 的构建或测试失败。\n标题: '"$EVENT_TITLE"'\n请检查详细日志: '"$PR_URL"'"
                    }
                  }' \
              "https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=${WECHAT_WEBHOOK_KEY}"
          else
            echo "在最大尝试次数内未检测到工作流的完成状态。"
            # 可选：发送超时通知
            curl -X POST -H "Content-Type: application/json" \
              -d '{
                    "msgtype": "text",
                    "text": {
                      "content": "仓库 '"$REPO_FULL_NAME"' 的构建和测试检查超时。\n标题: '"$EVENT_TITLE"'\n请手动检查相关工作流。"
                    }
                  }' \
              "https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=${WECHAT_WEBHOOK_KEY}"
            exit 1
          fi